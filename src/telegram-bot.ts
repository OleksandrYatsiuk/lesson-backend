import Telegraf from 'telegraf';
import { Markup, Extra, Stage, session, Composer } from 'telegraf';
import * as  WizardScene from 'telegraf/scenes/wizard';
import * as axios from 'axios';
const file = require('../data.json');
const bot = new Telegraf(process.env.BOT_TOKEN);
const link = 'https://lesson-frontend.herokuapp.com';
const apiUrl = 'https://lesson-backend.herokuapp.com/api/v1';

bot.telegram.deleteWebhook().then(success => {
    success && console.log('ü§ñ is listening to your commands');
    bot.startPolling();
})


bot.start(ctx => {
    if (ctx['startPayload']) {
        axios.default.patch(apiUrl + '/users/current', { phone: "+" + ctx['startPayload'], chat_id: ctx.chat.id });
    }
    return ctx.reply('Main menu', Markup
        .keyboard([
            ['üîç –ü—Ä–æ –Ω–∞—Å', 'üë®‚Äçüéì –ö—É—Ä—Å–∏'], // Row1 with 2 buttons
            ['‚ò∏ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏'], // Row2 with 2 buttons
            ['üí∞ –û–ø–ª–∞—Ç–∞'], // Row2 with 2 buttons
        ])
        .oneTime()
        .resize()
        .extra())
})

bot.hears('üîç –ü—Ä–æ –Ω–∞—Å', ctx => {
    ctx.reply(file.about);
})
bot.hears('‚ò∏ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏', ctx => {
    ctx.reply(file.result);
})
bot.hears('üë®‚Äçüéì –ö—É—Ä—Å–∏', (ctx, next) => {
    return ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å',
        Markup.keyboard([
            ['Course 1', 'Course 2'],
        ])
            .oneTime()
            .resize()
            .extra()
    )
})
bot.hears('Course 1', (ctx) => {
    ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫', Markup.keyboard([
        Markup.callbackButton('/lesson', '/lesson'),
        Markup.callbackButton('/lesson', '/lesson')
    ]).extra())
})



bot.hears('üí∞ –û–ø–ª–∞—Ç–∞', ctx => {
    return ctx.reply('Practical Legal Courses ‚Äì —à–∫–æ–ª–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É', Extra.HTML().markup((m) =>
        m.inlineKeyboard([
            m.urlButton('–û–ø–ª–∞—Ç–∏—Ç–∏', `${link}/payment?chat_id=${ctx.chat.id}&courseId=1`),
        ])))
});


const superWizard = new WizardScene(
    'lesson-stepper',
    ctx => {
        ctx.reply('–í–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
        ctx.wizard.state.data = {};
        return ctx.wizard.next();
    },
    ctx => {
        console.log(ctx.update)
        ctx.reply('–î–æ–¥–∞—Ç–∏ —â–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–π —á–∏ —Ñ–∞–π–ª?', Markup.inlineKeyboard([
            Markup.callbackButton('No', 'no'),
            Markup.callbackButton('Yes', 'yes')
        ]).extra())
        return ctx.wizard.next()
    },
    ctx => {
        if (ctx.update.callback_query.data == 'yes') {
            ctx.reply('Write comment here:');
            return ctx.wizard.next();
        } else {
            return ctx.scene.leave();
        }
    },
    ctx => {
        bot.telegram.getFileLink(ctx.update.message.photo[0].file_id).then(url => console.log(url))
        ctx.wizard.state.data.phone = ctx.update.message.photo;
        ctx.reply(`Your name is ${JSON.stringify(ctx.wizard.state.data.phone)}`);
        return ctx.scene.leave();
    }
);

bot.hears('üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏', (ctx) => {
    ctx.replyWithMarkdown(`Open: [Contacts](${link})`);
})


const stage = new Stage([superWizard]);
bot.use(session());
bot.use(stage.middleware());
bot.command('lesson', ctx => {
    ctx.reply('–¢—É—Ç –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞ —É—Ä–æ–∫...');
    ctx['scene'].enter('lesson-stepper');
});